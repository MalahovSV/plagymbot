
from aiogram import Router, types, F
from asyncpg import Pool
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from core.keyboards.role_keyboards import get_keyboard



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddDeviceStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_name = State()
    waiting_for_location = State()

class FindDeviceState(StatesGroup):
    waiting_for_code = State()


router = Router()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
async def add_device_start(message: types.Message, user_role: str, state: FSMContext):
    print(user_role)
    if user_role != "sysadmin":
        print("–û—à–∏–±–∫–∞ —Ä–æ–ª–∏ —Å–∏—Å–∞–¥–º–∏–Ω")
        return 
    await message.answer("üî§ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await state.set_state(AddDeviceStates.waiting_for_code)

# === –•–µ–Ω–¥–ª–µ—Ä: "üîç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∫–æ–¥—É" ===
@router.message(F.text == "üîç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∫–æ–¥—É")
async def find_device_start(message: types.Message, user_role: str, state: FSMContext):
    print(user_role)
    if user_role != "sysadmin":
        return
    await message.answer("üî§ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(FindDeviceState.waiting_for_code)


@router.message(FindDeviceState.waiting_for_code)
async def find_device_by_code(message: types.Message, state: FSMContext, pool: Pool, user_role: str):
    print(user_role)
    if user_role != "sysadmin":
        await state.clear()
        return

    code = message.text.strip()
    async with pool.acquire() as conn:
        device = await conn.fetchrow(
            "SELECT name, location FROM devices WHERE device_code = $1", code
        )

    if device:
        await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:\n\n"
            f"–ö–æ–¥: {code}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {device['name']}\n"
            f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {device['location']}",
            reply_markup=get_keyboard("sysadmin")
        )
    else:
        await message.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_keyboard("sysadmin"))

    await state.clear()


# === –•–µ–Ω–¥–ª–µ—Ä: "üé´ –¢–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã" ===
@router.message(F.text == "üé´ –¢–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã")
async def show_current_tickets(message: types.Message, user_role: str, pool: Pool):
    if user_role != "sysadmin":
        return

    async with pool.acquire() as conn:
        tickets = await conn.fetch(
            """
            SELECT t.id, u.username, t.device_code, t.description, t.created_at
            FROM tickets t
            JOIN users u ON t.user_id = u.id
            WHERE t.status = 'open'
            ORDER BY t.created_at DESC
            LIMIT 10
            """
        )

    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.", reply_markup=get_keyboard("sysadmin"))
    else:
        response = "üé´ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
        for t in tickets:
            dev = t["device_code"] or "‚Äî"
            desc = (t["description"][:60] + "...") if len(t["description"]) > 60 else t["description"]
            response += f"ID: {t['id']} | –û—Ç: {t['username']}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {dev}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n\n"
        await message.answer(response, reply_markup=get_keyboard("sysadmin"))


# === –•–µ–Ω–¥–ª–µ—Ä: "üö™ –í—ã–π—Ç–∏" (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ common, –Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ) ===
@router.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def logout(message: types.Message, pool: Pool, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º telegram_id
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET telegram_id = NULL WHERE telegram_id = $1", message.from_user.id)
    
    from aiogram.types import ReplyKeyboardRemove
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", reply_markup=ReplyKeyboardRemove())
    await message.answer("–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")



